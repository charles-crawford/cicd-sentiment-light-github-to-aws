---
AWSTemplateFormatVersion: 2010-09-09


Description: >
  This template shows how to use AWS CodePipeline and AWS CodeBuild to build an
  automated continuous deployment pipeline to Amazon Elastic Container Service
  (Amazon ECS) using clusters powered by AWS Fargate or Amazon Elastic Compute
  Cloud (Amazon EC2).


Parameters:
  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2
    Description: >
      The launch type for your service. Selecting EC2 will create an Auto
      Scaling group of t2.micro instances for your cluster. See
      https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html
      to learn more about launch types.

  GitHubUser:
    Type: String
    Default: charles-crawford
    Description: Your username on GitHub.

  GitHubRepo:
    Type: String
    Default: sentiment-light
    Description: The repo name of the sample service.

  GitHubBranch:
    Type: String
    Default: main
    Description: The branch of the repo to continuously deploy.

  GitHubToken:
    Type: String
    NoEcho: true
    Description: >
      Token for the user specified above. (https://github.com/settings/tokens)

  TemplateBucket:
    Type: String
    Default: continuous-deployment-sentiment-light
    Description: >
      The S3 bucket from which to fetch the templates used by this stack.

  ImageTag:
    Type: String
    Default: latest
    Description: The image tag of the repository that the image is pushed to.

  ContainerPort:
    Type: Number
    Default: 5000
    Description: The port number that your service will run on inside the container.

  HostPort:
    Type: Number
    Default: 5001
    Description: The port number that your service will map to on the host if LaunchType is EC2

  DesiredCount:
    Type: Number
    Default: 1
    Description: The number of instantiations of the specified task definition

  InstanceType:
    Type: String
    Default: t2.medium
    Description: The instance type must be large enough in memory and cpu to handle your container specs

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      GitHubUser:
        default: "User"
      GitHubRepo:
        default: "Repo"
      GitHubBranch:
        default: "Branch"
      GitHubToken:
        default: "Personal Access Token"
      LaunchType:
        default: "Launch Type"
      ImageTag:
        default: "ImageTag"
      ContainerPort:
        default: "ContainerPort"
      HostPort:
        default: "HostPort"
      DesiredCount:
        default: "DesiredCount"
      InstanceType:
        default: "InstanceType"
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - LaunchType
          - InstanceType
      - Label:
          default: Service Configuration
        Parameters:
          - ContainerPort
          - HostPort
          - DesiredCount
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubUser
          - GitHubToken
      - Label:
          default: Stack Configuration
        Parameters:
          - TemplateBucket
      - Label:
          default: Image Repository Configuration
        Parameters:
          - ImageTag

Resources:
  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/ecs-cluster.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId
        InstanceType: !Ref InstanceType

  DeploymentPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/deployment-pipeline.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        Service: !GetAtt Service.Outputs.Service
        GitHubUser: !Ref GitHubUser
        GitHubToken: !Ref GitHubToken
        GitHubRepo: !Ref GitHubRepo
        GitHubBranch: !Ref GitHubBranch
        ImageTag: !Ref ImageTag

  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/load-balancer.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId
        HostPort: !Ref HostPort
        ContainerPort: !Ref ContainerPort

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/vpc.yaml"
      Parameters:
        Name: !Ref AWS::StackName
        VpcCIDR: 10.215.0.0/16
        Subnet1CIDR: 10.215.10.0/24
        Subnet2CIDR: 10.215.20.0/24

  Service:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/service.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        LaunchType: !Ref LaunchType
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets
        ImageTag: !Ref ImageTag
        GitHubRepo: !Ref GitHubRepo
        ContainerPort: !Ref ContainerPort
        HostPort: !Ref HostPort
        DesiredCount: !Ref DesiredCount

Outputs:
  ServiceUrl:
    Description: The sample service that is being continuously deployed.
    Value: !GetAtt LoadBalancer.Outputs.ServiceUrl

  PipelineUrl:
    Description: The continuous deployment pipeline in the AWS Management Console.
    Value: !GetAtt DeploymentPipeline.Outputs.PipelineUrl
